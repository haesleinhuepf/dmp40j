plugins {
	id "com.jfrog.bintray" version "1.2"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceSets 
{
  main 
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
  test
  {
    java 
    {
      srcDir 'src'
    }
    resources 
    { 
      srcDir 'src'
    }
  }
}


sourceCompatibility = 1.8


test 
{
    testLogging.showStandardStreams = true 
    testLogging 
    {
        events "passed", "skipped", "failed"
    }

    exclude '**/demo/**'
    exclude '**/run/**'

    maxHeapSize = "4G"
}

dependencies 
{
    compile 'org.apache.commons:commons-collections4:4.0'
    //compile 'commons-io:commons-io:2.4'
    //compile 'org.apache.commons:commons-lang3:3.4'
    //compile 'org.apache.commons:commons-math3:3.4.1'
    //compile 'org.apache.logging.log4j:log4j-api:2.1'
    //compile 'org.apache.logging.log4j:log4j-core:2.1'
    compile 'com.nativelibs4java:bridj:0.7.0'

    compile group: 'junit', name: 'junit', version: '4.+'
    testCompile group: 'junit', name: 'junit', version: '4.+'
}

repositories 
{
    mavenCentral()
    maven 
    {
        url "http://oss.sonatype.org/content/groups/public"
    } 
}


task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
      tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
      }
    }
  }



//***********************************************************************************
// PUBLISHING


/*
 * Gets the version name from the latest Git tag
 */
def getVersionName = {
    ->
    def stdout = new ByteArrayOutputStream()
    exec {
        commandLine 'git', 'describe', '--tags'
        standardOutput = stdout
    }
    return stdout.toString().trim()
}

group = 'net.clearcontrol'
version = '0.1.1'
//getVersionName()

artifacts
{
	archives sourcesJar
	archives javadocJar
}

publishing {
	publications {
		maven(MavenPublication) {
			from components.java
			artifact sourcesJar { classifier "sources" }
		}
	}
}

if(hasProperty('bintray_user') && hasProperty('bintray_key') )
{
	bintray {

		// property must be set in ~/.gradle/gradle.properties
		user = bintray_user
		key =  bintray_key

		publications = [
			'maven'] //When uploading configuration files
		dryRun = false //Whether to run this as dry-run, without deploying
		publish = true //If version should be auto published after an upload
		pkg {
			repo = 'snapshots'
			userOrg = 'haesleinhuepf' //An optional organization name when the repo belongs to one of the user's orgs
			name = project.name
			desc = project.name
			websiteUrl = 'https://github.com/ClearControl/DMP40J'
			issueTrackerUrl = 'https://github.com/ClearControl/DMP40J/issues'
			vcsUrl = 'https://github.com/ClearControl/DMP40J.git'
			licenses = ['LGPL-3.0']
			labels = [
				'ClearControl',
				'Drivers',
				'Devices',
				'Hardware',
				'Microscopy',
				'Real-time'
			]
			publicDownloadNumbers = true
			//attributes= ['a': ['ay1', 'ay2'], 'b': ['bee'], c: 'cee'] //Optional package-level attributes
			//Optional version descriptor
			version {
				name = project.version //Bintray logical version name
				desc = '.'
				released  = new java.util.Date()
				vcsTag = project.version
				/*attributes = ['gradle-plugin': 'com.use.less:com.use.less.gradle:gradle-useless-plugin'] //Optional version-level attributes
				 gpg {
				 sign = false //Determines whether to GPG sign the files. The default is false
				 passphrase = 'passphrase' //Optional. The passphrase for GPG signing'
				 }
				 mavenCentralSync {
				 sync = false //Optional (true by default). Determines whether to sync the version to Maven Central.
				 user = 'userToken' //OSS user token
				 password = 'paasword' //OSS user password
				 close = '1' //Optional property. By default the staging repository is closed and artifacts are released to Maven Central. You can optionally turn this behaviour off (by puting 0 as value) and release the version manually.
				 }  /**/          
			}
		}
	}
	/**/
}
