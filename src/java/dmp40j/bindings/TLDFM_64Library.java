package dmp40j.bindings;
import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.Callback;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Convention.Style;
import org.bridj.ann.Convention;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>TLDFM_64</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library(value = "TLDFM_64", dependencies = {"C:\\structure\\code\\dmp40j\\lib\\dmp40\\TLDFM_64.dll"}) 
@Runtime(CRuntime.class) 
public class TLDFM_64Library {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : lib\dmp40\TLDFM_def.h</i>
	 */
	public enum TLDFM_Switch_Mode implements IntValuedEnum<TLDFM_Switch_Mode > {
		SM_Auto(0),
		SM_Manual(1);
		TLDFM_Switch_Mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<TLDFM_Switch_Mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<TLDFM_Switch_Mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : lib\dmp40\TLDFM_def.h</i>
	 */
	public enum TLDFM_Target implements IntValuedEnum<TLDFM_Target > {
		T_Mirror(0),
		T_Tilt(1),
		T_Both(2);
		TLDFM_Target(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<TLDFM_Target > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<TLDFM_Target > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/**
	 * enum values<br>
	 * <i>native declaration : lib\dmp40\TLDFM_def.h</i>
	 */
	public enum TLDFM_Access_Mode implements IntValuedEnum<TLDFM_Access_Mode > {
		AM_No_Lock(0),
		AM_Exclusive_Lock(1),
		AM_Shared_Lock(2);
		TLDFM_Access_Mode(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<TLDFM_Access_Mode > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<TLDFM_Access_Mode > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : lib\dmp40\visatype.h</i> */
	public static final int _VI_ERROR = (int)(-2147483647 - 1);
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : lib\dmp40\visatype.h</i><br>
	 * *
	 */
	/** <i>native declaration : lib\dmp40\visatype.h</i> */
	public static final int VI_SUCCESS = (int)(0);
	/** <i>native declaration : lib\dmp40\visatype.h</i> */
	public static final int VI_NULL = (int)(0);
	/** <i>native declaration : lib\dmp40\visatype.h</i> */
	public static final int VI_TRUE = (int)(1);
	/** <i>native declaration : lib\dmp40\visatype.h</i> */
	public static final int VI_FALSE = (int)(0);
	/**
	 * define<br>
	 * Conversion Error : null<br>
	 * SKIPPED:<br>
	 * <i>native declaration : lib\dmp40\visatype.h</i><br>
	 * *
	 */
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_WARN_NSUP_ID_QUERY = (int)(0x3FFC0101);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_WARN_NSUP_RESET = (int)(0x3FFC0102);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_WARN_NSUP_SELF_TEST = (int)(0x3FFC0103);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_WARN_NSUP_ERROR_QUERY = (int)(0x3FFC0104);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_WARN_NSUP_REV_QUERY = (int)(0x3FFC0105);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER1 = (int)((-2147483647 - 1) + 0x3FFC0001);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER2 = (int)((-2147483647 - 1) + 0x3FFC0002);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER3 = (int)((-2147483647 - 1) + 0x3FFC0003);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER4 = (int)((-2147483647 - 1) + 0x3FFC0004);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER5 = (int)((-2147483647 - 1) + 0x3FFC0005);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER6 = (int)((-2147483647 - 1) + 0x3FFC0006);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER7 = (int)((-2147483647 - 1) + 0x3FFC0007);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_PARAMETER8 = (int)((-2147483647 - 1) + 0x3FFC0008);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_FAIL_ID_QUERY = (int)((-2147483647 - 1) + 0x3FFC0011);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ERROR_INV_RESPONSE = (int)((-2147483647 - 1) + 0x3FFC0012);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_ON = (int)(1);
	/** <i>native declaration : lib\dmp40\vpptype.h</i> */
	public static final int VI_OFF = (int)(0);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final String TLDFM_VI_FIND_RSC_PATTERN = (String)"USB?*?{VI_ATTR_MANF_ID==0x1313 && VI_ATTR_MODEL_CODE==0x8016}";
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_STRING_LENGTH = (int)60;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_INSTR_NAME_LENGTH = (int)28;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_MAX_SN_LENGTH = (int)28;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_BUFFER_SIZE = (int)256;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_USERTEXT_BUFFER_SIZE = (int)61;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERR_DESCR_BUFER_SIZE = (int)512;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_INSTR_WARNING_OFFSET = (int)0x3FFC0900;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_INSTR_ERROR_OFFSET = (int)((-2147483647 - 1) + 0x3FFC0900);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_USBCOMM_OFFSET = (int)((-2147483647 - 1) + 0x3FFC0B00);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x01);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_CMD = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x02);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_CMD_DIR = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x03);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_BYTE_CNT = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x04);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_DATA_RANGE = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x05);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_NO_MULT_SAMPLE = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x06);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_ALLREADY_RUNNING = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x07);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_HEAD_ERR_NO_ACCESS = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x08);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_CHECKSUM = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x09);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERR_CONF_UNAVAILABLE = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0A);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERR_HYST_UNAVAILABLE = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0B);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_EXTERNAL_PWR = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0C);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_INTERNAL_PWR = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0D);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_OHT_EL = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0E);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_OHT_HV_IC = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x0F);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_OHT_HV_MI = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x10);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_UNKNOWN_TARGET = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x21);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_NOSUP_TARGET = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x22);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int VI_ERROR_PARAMETER9 = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0x99);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_NO_ERROR = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0xFE);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_ERROR_UNKNOWN = (int)(((-2147483647 - 1) + 0x3FFC0900) + 0xFF);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_ELECTRIC = (int)(0x3FFC0900 + 0x00);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_IC = (int)(0x3FFC0900 + 0x01);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_WARNING_TEMP_MIRROR = (int)(0x3FFC0900 + 0x03);
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_SUCCESS = (int)0x0000;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_NOT_POS = (int)0xFFFF;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_PWR_ERR = (int)0x0001;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static final int TLDFM_SELFTEST_TEMP_ERR = (int)0x0010;
	/** <i>native declaration : lib\dmp40\TLDFM_def.h</i> */
	public static abstract class StatusUpdate extends Callback<StatusUpdate > {
		@Convention(Convention.Style.StdCall) 
		public abstract int apply();
	};
	/**
	 * Global functions<br>
	 * Original signature : <code>ViStatus TLDFM_get_device_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:5</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_device_count(@org.bridj.ann.CLong long instrumentHandle, Pointer<org.bridj.CLong > pDeviceCount) {
		return TLDFM_get_device_count(instrumentHandle, Pointer.getPeer(pDeviceCount));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_device_count(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pDeviceCount);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_device_information(ViSession, ViUInt32, ViChar[], ViChar[], ViChar[], ViBoolean*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:8</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_device_information(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long deviceIndex, Pointer<Byte > manufacturer, Pointer<Byte > instrumentName, Pointer<Byte > serialNumber, Pointer<Short > pDeviceAvailable, Pointer<Byte > resourceName) {
		return TLDFM_get_device_information(instrumentHandle, deviceIndex, Pointer.getPeer(manufacturer), Pointer.getPeer(instrumentName), Pointer.getPeer(serialNumber), Pointer.getPeer(pDeviceAvailable), Pointer.getPeer(resourceName));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_device_information(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long deviceIndex, @Ptr long manufacturer, @Ptr long instrumentName, @Ptr long serialNumber, @Ptr long pDeviceAvailable, @Ptr long resourceName);
	/**
	 * required VXIpnp instrument driver functions<br>
	 * Original signature : <code>ViStatus TLDFM_init(ViRsrc, ViBoolean, ViBoolean, ViSession*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:19</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_init(Pointer<Byte > resourceName, short IDQuery, short resetDevice, Pointer<org.bridj.CLong > pInstrumentHandle) {
		return TLDFM_init(Pointer.getPeer(resourceName), IDQuery, resetDevice, Pointer.getPeer(pInstrumentHandle));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_init(@Ptr long resourceName, short IDQuery, short resetDevice, @Ptr long pInstrumentHandle);
	/**
	 * Original signature : <code>ViStatus TLDFM_close(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:24</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_close(@org.bridj.ann.CLong long instrumentHandle);
	/**
	 * Original signature : <code>ViStatus TLDFM_reset(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:26</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_reset(@org.bridj.ann.CLong long instrumentHandle);
	/**
	 * Original signature : <code>ViStatus TLDFM_self_test(ViSession, ViInt16*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:28</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_self_test(@org.bridj.ann.CLong long instrumentHandle, Pointer<Short > pSelfTestResult, Pointer<Byte > selfTestMessage) {
		return TLDFM_self_test(instrumentHandle, Pointer.getPeer(pSelfTestResult), Pointer.getPeer(selfTestMessage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_self_test(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSelfTestResult, @Ptr long selfTestMessage);
	/**
	 * Original signature : <code>ViStatus TLDFM_error_query(ViSession, ViInt32*, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:32</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_error_query(@org.bridj.ann.CLong long instrumentHandle, Pointer<org.bridj.CLong > pErrorCode, Pointer<Byte > errorMessage) {
		return TLDFM_error_query(instrumentHandle, Pointer.getPeer(pErrorCode), Pointer.getPeer(errorMessage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_error_query(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pErrorCode, @Ptr long errorMessage);
	/**
	 * Original signature : <code>ViStatus TLDFM_error_message(ViSession, ViStatus, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:36</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_error_message(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long errorCode, Pointer<Byte > errorMessage) {
		return TLDFM_error_message(instrumentHandle, errorCode, Pointer.getPeer(errorMessage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_error_message(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long errorCode, @Ptr long errorMessage);
	/**
	 * Original signature : <code>ViStatus TLDFM_revision_query(ViSession, ViChar[], ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:40</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_revision_query(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > driverRevision, Pointer<Byte > firmwareRevision) {
		return TLDFM_revision_query(instrumentHandle, Pointer.getPeer(driverRevision), Pointer.getPeer(firmwareRevision));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_revision_query(@org.bridj.ann.CLong long instrumentHandle, @Ptr long driverRevision, @Ptr long firmwareRevision);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>ViStatus TLDFM_set_USB_access_mode(ViSession, TLDFM_Access_Mode, ViString, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:46</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_USB_access_mode(@org.bridj.ann.CLong long instrumentHandle, IntValuedEnum<TLDFM_64Library.TLDFM_Access_Mode > accessMode, Pointer<Byte > requestedKey, Pointer<Byte > accessKey) {
		return TLDFM_set_USB_access_mode(instrumentHandle, (int)accessMode.value(), Pointer.getPeer(requestedKey), Pointer.getPeer(accessKey));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_USB_access_mode(@org.bridj.ann.CLong long instrumentHandle, int accessMode, @Ptr long requestedKey, @Ptr long accessKey);
	/**
	 * segment voltage functions<br>
	 * Original signature : <code>ViStatus TLDFM_get_segment_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:54</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_segment_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentIndex, Pointer<Double > pSegmentVoltage) {
		return TLDFM_get_segment_voltage(instrumentHandle, segmentIndex, Pointer.getPeer(pSegmentVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_segment_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentIndex, @Ptr long pSegmentVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_segment_voltage(ViSession, ViUInt32, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:58</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_set_segment_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentIndex, double segmentVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:62</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages) {
		return TLDFM_get_segment_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:65</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages) {
		return TLDFM_set_segment_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * tilt element voltage functions<br>
	 * Original signature : <code>ViStatus TLDFM_get_tilt_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:71</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_tilt_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long tiltIndex, Pointer<Double > pTiltVoltage) {
		return TLDFM_get_tilt_voltage(instrumentHandle, tiltIndex, Pointer.getPeer(pTiltVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_tilt_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long tiltIndex, @Ptr long pTiltVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_tilt_voltage(ViSession, ViUInt32, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:75</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_set_tilt_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long tiltIndex, double tiltVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:79</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > tiltVoltages) {
		return TLDFM_get_tilt_voltages(instrumentHandle, Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:82</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > tiltVoltages) {
		return TLDFM_set_tilt_voltages(instrumentHandle, Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_tilt_amplitude_angle(ViSession, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:85</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_set_tilt_amplitude_angle(@org.bridj.ann.CLong long instrumentHandle, double amplitute, double angle);
	/**
	 * sets the voltages for all segments and all tilt elements<br>
	 * Original signature : <code>ViStatus TLDFM_get_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:93</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages, Pointer<Double > tiltVoltages) {
		return TLDFM_get_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:97</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages, Pointer<Double > tiltVoltages) {
		return TLDFM_set_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * device information functions<br>
	 * Original signature : <code>ViStatus TLDFM_get_manufacturer_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:104</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_manufacturer_name(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > manufacturerName) {
		return TLDFM_get_manufacturer_name(instrumentHandle, Pointer.getPeer(manufacturerName));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_manufacturer_name(@org.bridj.ann.CLong long instrumentHandle, @Ptr long manufacturerName);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_instrument_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:107</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_instrument_name(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > instrName) {
		return TLDFM_get_instrument_name(instrumentHandle, Pointer.getPeer(instrName));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_instrument_name(@org.bridj.ann.CLong long instrumentHandle, @Ptr long instrName);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_instrument_name(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:110</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_instrument_name(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > instrName) {
		return TLDFM_set_instrument_name(instrumentHandle, Pointer.getPeer(instrName));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_instrument_name(@org.bridj.ann.CLong long instrumentHandle, @Ptr long instrName);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_serial_Number(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:113</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_serial_Number(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > serialNumber) {
		return TLDFM_get_serial_Number(instrumentHandle, Pointer.getPeer(serialNumber));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_serial_Number(@org.bridj.ann.CLong long instrumentHandle, @Ptr long serialNumber);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_serial_number(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:116</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_serial_number(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > serialNumber) {
		return TLDFM_set_serial_number(instrumentHandle, Pointer.getPeer(serialNumber));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_serial_number(@org.bridj.ann.CLong long instrumentHandle, @Ptr long serialNumber);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_user_text(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:119</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_user_text(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > userText) {
		return TLDFM_get_user_text(instrumentHandle, Pointer.getPeer(userText));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_user_text(@org.bridj.ann.CLong long instrumentHandle, @Ptr long userText);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_user_text(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:122</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_user_text(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > userText) {
		return TLDFM_set_user_text(instrumentHandle, Pointer.getPeer(userText));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_user_text(@org.bridj.ann.CLong long instrumentHandle, @Ptr long userText);
	/**
	 * Original signature : <code>ViStatus TLDFM_update_firmware(ViSession, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:125</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_update_firmware(@org.bridj.ann.CLong long instrumentHandle, Pointer<Byte > firmwareFile) {
		return TLDFM_update_firmware(instrumentHandle, Pointer.getPeer(firmwareFile));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_update_firmware(@org.bridj.ann.CLong long instrumentHandle, @Ptr long firmwareFile);
	/**
	 * Original signature : <code>ViStatus TLDFM_enable_event(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:128</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_enable_event(@org.bridj.ann.CLong long instrumentHandle);
	/**
	 * Original signature : <code>ViStatus TLDFM_disable_event(ViSession)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:130</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_disable_event(@org.bridj.ann.CLong long instrumentHandle);
	/**
	 * Original signature : <code>ViStatus TLDFM_add_status_delegate(ViSession, StatusUpdate)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:132</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_add_status_delegate(@org.bridj.ann.CLong long instrumentHandle, Pointer<TLDFM_64Library.StatusUpdate > statusUpdateDelegate) {
		return TLDFM_add_status_delegate(instrumentHandle, Pointer.getPeer(statusUpdateDelegate));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_add_status_delegate(@org.bridj.ann.CLong long instrumentHandle, @Ptr long statusUpdateDelegate);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>ViStatus TLDFM_get_segment_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:137</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_segment_count(@org.bridj.ann.CLong long instrumentHandle, Pointer<org.bridj.CLong > pSegmentCount) {
		return TLDFM_get_segment_count(instrumentHandle, Pointer.getPeer(pSegmentCount));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_segment_count(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSegmentCount);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_segment_maximum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:140</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_segment_maximum(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pSegmentMaximum) {
		return TLDFM_get_segment_maximum(instrumentHandle, Pointer.getPeer(pSegmentMaximum));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_segment_maximum(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSegmentMaximum);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_segment_minimum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:143</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_segment_minimum(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pSegmentMinimum) {
		return TLDFM_get_segment_minimum(instrumentHandle, Pointer.getPeer(pSegmentMinimum));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_segment_minimum(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSegmentMinimum);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_tilt_count(ViSession, ViUInt32*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:146</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_tilt_count(@org.bridj.ann.CLong long instrumentHandle, Pointer<org.bridj.CLong > pTiltCount) {
		return TLDFM_get_tilt_count(instrumentHandle, Pointer.getPeer(pTiltCount));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_tilt_count(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pTiltCount);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_tilt_maximum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:149</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_tilt_maximum(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pTiltMaximum) {
		return TLDFM_get_tilt_maximum(instrumentHandle, Pointer.getPeer(pTiltMaximum));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_tilt_maximum(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pTiltMaximum);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_tilt_minimum(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:152</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_tilt_minimum(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pTiltMinimum) {
		return TLDFM_get_tilt_minimum(instrumentHandle, Pointer.getPeer(pTiltMinimum));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_tilt_minimum(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pTiltMinimum);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>ViStatus TLDFM_set_access_level(ViSession, ViChar, ViChar[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:157</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_access_level(@org.bridj.ann.CLong long instrumentHandle, byte accessLevel, Pointer<Byte > accessPassword) {
		return TLDFM_set_access_level(instrumentHandle, accessLevel, Pointer.getPeer(accessPassword));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_access_level(@org.bridj.ann.CLong long instrumentHandle, byte accessLevel, @Ptr long accessPassword);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_device_configuration(ViSession, ViUInt32*, ViReal64*, ViReal64*, ViReal64*, ViUInt32*, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:161</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_device_configuration(@org.bridj.ann.CLong long instrumentHandle, Pointer<org.bridj.CLong > pSegmentCnt, Pointer<Double > pMinSegmentVoltage, Pointer<Double > pMaxSegmentVoltage, Pointer<Double > pSegmentCommonVoltageMax, Pointer<org.bridj.CLong > pTiltElementCnt, Pointer<Double > pMinTiltVoltage, Pointer<Double > pMaxTiltVoltage, Pointer<Double > pTiltCommonVoltageMax) {
		return TLDFM_get_device_configuration(instrumentHandle, Pointer.getPeer(pSegmentCnt), Pointer.getPeer(pMinSegmentVoltage), Pointer.getPeer(pMaxSegmentVoltage), Pointer.getPeer(pSegmentCommonVoltageMax), Pointer.getPeer(pTiltElementCnt), Pointer.getPeer(pMinTiltVoltage), Pointer.getPeer(pMaxTiltVoltage), Pointer.getPeer(pTiltCommonVoltageMax));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_device_configuration(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSegmentCnt, @Ptr long pMinSegmentVoltage, @Ptr long pMaxSegmentVoltage, @Ptr long pSegmentCommonVoltageMax, @Ptr long pTiltElementCnt, @Ptr long pMinTiltVoltage, @Ptr long pMaxTiltVoltage, @Ptr long pTiltCommonVoltageMax);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_device_configuration(ViSession, ViUInt32, ViReal64, ViReal64, ViReal64, ViUInt32, ViReal64, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:171</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_set_device_configuration(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentCnt, double minSegmentVoltage, double maxSegmentVoltage, double segmentCommonVoltageMax, @org.bridj.ann.CLong long tiltElementCnt, double minTiltVoltage, double maxTiltVoltage, double tiltCommonVoltageMax);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_device_calibration(ViSession, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:181</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_device_calibration(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pSegmentVoltageCompensation, Pointer<Double > pTiltVoltageCompensation, Pointer<Double > pSingleSegmentTiltVoltage) {
		return TLDFM_get_device_calibration(instrumentHandle, Pointer.getPeer(pSegmentVoltageCompensation), Pointer.getPeer(pTiltVoltageCompensation), Pointer.getPeer(pSingleSegmentTiltVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_device_calibration(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pSegmentVoltageCompensation, @Ptr long pTiltVoltageCompensation, @Ptr long pSingleSegmentTiltVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_device_calibration(ViSession, ViReal64, ViReal64, ViReal64)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:186</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static native long TLDFM_set_device_calibration(@org.bridj.ann.CLong long instrumentHandle, double segmentVoltageCompensation, double tiltVoltageCompensation, double singleSegmentTiltVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_hysteresis_parameters(ViSession, TLDFM_Target, ViUInt32*, ViReal64*, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:191</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_hysteresis_parameters(@org.bridj.ann.CLong long instrumentHandle, IntValuedEnum<TLDFM_64Library.TLDFM_Target > target, Pointer<org.bridj.CLong > pCount, Pointer<Double > pNonlinearFactor, Pointer<Double > arrayTresholdInverter, Pointer<Double > arrayWeightInverter) {
		return TLDFM_get_hysteresis_parameters(instrumentHandle, (int)target.value(), Pointer.getPeer(pCount), Pointer.getPeer(pNonlinearFactor), Pointer.getPeer(arrayTresholdInverter), Pointer.getPeer(arrayWeightInverter));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_hysteresis_parameters(@org.bridj.ann.CLong long instrumentHandle, int target, @Ptr long pCount, @Ptr long pNonlinearFactor, @Ptr long arrayTresholdInverter, @Ptr long arrayWeightInverter);
	/**
	 * Original signature : <code>ViStatus TLDFM_set_hysteresis_parameters(ViSession, TLDFM_Target, ViUInt32, ViReal64, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:198</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_set_hysteresis_parameters(@org.bridj.ann.CLong long instrumentHandle, IntValuedEnum<TLDFM_64Library.TLDFM_Target > target, @org.bridj.ann.CLong long count, double nonlinearFactor, Pointer<Double > arrayTresholdInverter, Pointer<Double > arrayWeightInverter) {
		return TLDFM_set_hysteresis_parameters(instrumentHandle, (int)target.value(), count, nonlinearFactor, Pointer.getPeer(arrayTresholdInverter), Pointer.getPeer(arrayWeightInverter));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_set_hysteresis_parameters(@org.bridj.ann.CLong long instrumentHandle, int target, @org.bridj.ann.CLong long count, double nonlinearFactor, @Ptr long arrayTresholdInverter, @Ptr long arrayWeightInverter);
	/**
	 * Original signature : <code>ViStatus TLDFM_enabled_hysteresis_compensation(ViSession, TLDFM_Target, ViBoolean*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:205</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_enabled_hysteresis_compensation(@org.bridj.ann.CLong long instrumentHandle, IntValuedEnum<TLDFM_64Library.TLDFM_Target > target, Pointer<Short > pEnabled) {
		return TLDFM_enabled_hysteresis_compensation(instrumentHandle, (int)target.value(), Pointer.getPeer(pEnabled));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_enabled_hysteresis_compensation(@org.bridj.ann.CLong long instrumentHandle, int target, @Ptr long pEnabled);
	/**
	 * Original signature : <code>ViStatus TLDFM_enable_hysteresis_compensation(ViSession, TLDFM_Target, ViBoolean)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:209</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_enable_hysteresis_compensation(@org.bridj.ann.CLong long instrumentHandle, IntValuedEnum<TLDFM_64Library.TLDFM_Target > target, short enable) {
		return TLDFM_enable_hysteresis_compensation(instrumentHandle, (int)target.value(), enable);
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_enable_hysteresis_compensation(@org.bridj.ann.CLong long instrumentHandle, int target, short enable);
	/**
	 * ******************************************************************************<br>
	 * Original signature : <code>ViStatus TLDFM_get_measured_segment_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:215</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_measured_segment_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentIndex, Pointer<Double > pSegmentVoltage) {
		return TLDFM_get_measured_segment_voltage(instrumentHandle, segmentIndex, Pointer.getPeer(pSegmentVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_measured_segment_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long segmentIndex, @Ptr long pSegmentVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_measured_segment_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:219</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_measured_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages) {
		return TLDFM_get_measured_segment_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_measured_segment_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_measured_tilt_voltage(ViSession, ViUInt32, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:222</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_measured_tilt_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long tiltIndex, Pointer<Double > pTiltVoltage) {
		return TLDFM_get_measured_tilt_voltage(instrumentHandle, tiltIndex, Pointer.getPeer(pTiltVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_measured_tilt_voltage(@org.bridj.ann.CLong long instrumentHandle, @org.bridj.ann.CLong long tiltIndex, @Ptr long pTiltVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_measured_tilt_voltages(ViSession, ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:226</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_measured_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > tiltVoltages) {
		return TLDFM_get_measured_tilt_voltages(instrumentHandle, Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_measured_tilt_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_measured_voltages(ViSession, ViReal64[], ViReal64[])</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:229</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_measured_voltages(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > segmentVoltages, Pointer<Double > tiltVoltages) {
		return TLDFM_get_measured_voltages(instrumentHandle, Pointer.getPeer(segmentVoltages), Pointer.getPeer(tiltVoltages));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_measured_voltages(@org.bridj.ann.CLong long instrumentHandle, @Ptr long segmentVoltages, @Ptr long tiltVoltages);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_feedback_voltage(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:233</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_feedback_voltage(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pFeedbackVoltage) {
		return TLDFM_get_feedback_voltage(instrumentHandle, Pointer.getPeer(pFeedbackVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_feedback_voltage(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pFeedbackVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_feedback_current(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:236</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_feedback_current(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pFeedbackCurrent) {
		return TLDFM_get_feedback_current(instrumentHandle, Pointer.getPeer(pFeedbackCurrent));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_feedback_current(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pFeedbackCurrent);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_feedback(ViSession, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:239</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_feedback(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pFeedbackVoltage, Pointer<Double > pFeedbackCurrent) {
		return TLDFM_get_feedback(instrumentHandle, Pointer.getPeer(pFeedbackVoltage), Pointer.getPeer(pFeedbackCurrent));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_feedback(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pFeedbackVoltage, @Ptr long pFeedbackCurrent);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_monitor_voltage(ViSession, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:243</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_monitor_voltage(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pMonitorVoltage) {
		return TLDFM_get_monitor_voltage(instrumentHandle, Pointer.getPeer(pMonitorVoltage));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_monitor_voltage(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pMonitorVoltage);
	/**
	 * Original signature : <code>ViStatus TLDFM_get_temperatures(ViSession, ViReal64*, ViReal64*, ViReal64*, ViReal64*)</code><br>
	 * <i>native declaration : lib\dmp40\TLDFM.h:246</i>
	 */
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	public static long TLDFM_get_temperatures(@org.bridj.ann.CLong long instrumentHandle, Pointer<Double > pIC1Temperatur, Pointer<Double > pIC2Temperatur, Pointer<Double > pMirrorTemperatur, Pointer<Double > pElectronicTemperatur) {
		return TLDFM_get_temperatures(instrumentHandle, Pointer.getPeer(pIC1Temperatur), Pointer.getPeer(pIC2Temperatur), Pointer.getPeer(pMirrorTemperatur), Pointer.getPeer(pElectronicTemperatur));
	}
	@Convention(Convention.Style.StdCall) 
	@org.bridj.ann.CLong 
	protected native static long TLDFM_get_temperatures(@org.bridj.ann.CLong long instrumentHandle, @Ptr long pIC1Temperatur, @Ptr long pIC2Temperatur, @Ptr long pMirrorTemperatur, @Ptr long pElectronicTemperatur);
}
